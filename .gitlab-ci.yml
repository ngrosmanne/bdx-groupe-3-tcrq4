image: docker:latest
services:
  - name: docker:dind
    alias: docker

stages:          # List of stages for jobs, and their order of execution
  - build
  - scan
  - release-image
  - test-acceptation
  - test-application
  - deploy-staging
  - test-deploy-staging
  - deploy-prod
  - test-deploy-prod
  - monitor

build: # Construction de l'image avec Dockerfile
  stage: build
  script:
    - echo "Construction de l'image avec Dockerfile" 
    - docker build -t imagedevopsapp .
    - rm -f /var/lib/docker/volumes/runner-o3-kzgvp-project-37722816-concurrent-0-cache-c33bcaa1fd2c77edfc3893b41966cea8/_data/ngrosmanne/bdx-groupe-3-tcrq4/imagedevopsapp.tar || echo "Atifacts not found"
    - docker save imagedevopsapp > imagedevopsapp.tar
  artifacts:
    paths:
    - imagedevopsapp.tar   

scan:   # scan de l'image via docker scan 
  stage: scan
  script:
    - echo "Scan via docker-scan"
    #- apk add docker-scan-plugin
    - sudo yum install docker-scan-plugin
    - docker scan imagedevopsapp

release-image:  # Dépot de l'image sur Dockerhub
  stage: release-image
  script:
    - docker load < imagedevopsapp.tar
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD" 
    - docker tag imagedevopsapp:latest bidou974/imagedevopsapp:latest
    - docker push bidou974/imagedevopsapp:latest

test acceptation: # Controle l'intégrité du conteneur et app   
  stage: test-acceptation
  script:
    - docker rm -f testimagedevopsapp || echo "no run start"
    - docker load < imagedevopsapp.tar
    - docker run -d -p 8081:80 --name testimagedevopsapp imagedevopsapp:latest
    - sleep 5
    - apk --no-cache add curl
    - curl -I 192.168.203.87:8081
    - curl 192.168.203.87:8081 | grep ">Start Bootstrap<"
    - sleep 5
    - docker rm -f testimagedevopsapp

.test application:   # Test de l'appli MochaJS
  stage: test-application
  script:
    - echo "Test unitaire MochaJS"

deploy-staging: # Déploiement via runner #16440669 
  stage: deploy-staging
  #image: nginx
  environment:
    name: staging
  only:
    - main
  script:
    - docker rm -f devopsapp || echo "Port 8080 free"
    - docker run -d -p 8080:80 --name devopsapp bidou974/imagedevopsapp

test-deploy-staging: # Test du déploiement staging sur runner 
  stage: test-deploy-staging
  script:
    - echo "test deploy staging"
    - apk --no-cache add curl
    - curl -I 192.168.203.87:8080

.deploy-prod: # Déploiement staging sur WMS 
  stage: deploy-prod
  environment:
    name: prod
    url: # A def
  only:
    - prod
  script:
    - echo "deploy sur prod"

.test-deploy-prod: # Test du déploiement staging sur Heroku 
  stage: test-deploy-prod
  script:
    - echo "test deploy prod" 

.monitor:
  stage: monitor 
  script:
    - echo "monitoring prometheus -> grafana"
    
