image: docker:latest
services:
  - name: docker:dind
    alias: docker

stages:          # List of stages for jobs, and their order of execution
  - build
  #- scan
  - test-acceptation
  - test
  - push
  - deploy-staging
  - test-deploy
  - monitor

build: # Construction de l'image avec Dockerfile
  stage: build
  script:
    - echo "Construction de l'image avec Dockerfile"
    - docker build -t imagedevopsapp .
    - docker save imagedevopsapp > imagedevopsapp.tar
  artifacts:
    paths:
    - imagedevopsapp.tar   

#scan:   # scan de l'image via docker-scan 
#  stage: scan
#  script:
#    - echo "via docker-scan"
#    - cat /etc/os-release
#    - apk add docker-scan-plugin
#    - docker scan imagedevopsapp

test acceptation: # Controle l'intégrité du conteneur et app   
  stage: test-acceptation
  script:
    - docker load < imagedevopsapp.tar
    - docker run --rm imagedevopsapp cat /usr/share/nginx/html/index.html | grep Start
    - sleep 5  

test:   # Test de l'appli MochaJS
  stage: test
  script:
    - echo "Test unitaire MochaJS"

push :   # via docker run et curl
  stage: push
  script:
    - echo "push de limage sur docker hub"

deploy-staging: 
  stage: deploy-staging
  environment:
    name: staging
    url: https://devopsapp-staging.herokuapp.com
  only:
    - master
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create devopsapp-staging || echo "project already exist"
    - heroku container:push -a devopsapp-staging web
    - heroku container:release -a devopsapp-staging web

test-deploy:
  stage: test-deploy 
  script:
    - echo "curl sur http ??"

monitor:
  stage: monitor 
  script:
    - echo "monitoring prometheus -> grafana"